{"ast":null,"code":"import { put, takeEvery, takeLatest, all } from \"redux-saga/effects\"; // we need to code generator function for saga like this\n\nexport function* helloSaga() {\n  console.log(\"hello from saga\");\n}\n\nconst delay = milliseconds => new Promise(res => setTimeout(res, milliseconds)); //promises are functions that do their jon asynchronously. they display their results after some delay\n//another saga we ll use \n// lets write one that will call ADD_ONE action\n\n\nexport function* callAddOne() {\n  yield delay(1000); // delay by 1 sec\n\n  console.log(\"Inside callAddone ASYNC !! call action ADD_ONE asynchronously\");\n  yield put({\n    type: \"ADD_ONE\"\n  }); //dispatch this action asynchronously\n}\nexport function* watchAddOneActionHappeningInTheApp() {\n  yield takeEvery('ADD_ONE_ASYNC', callAddOne); //dispatch this action asynchronously\n} // watch NEWS saga\n\nfunction* fetchNews() {\n  const json = yield fetch('https://newsapi.org/v1/articles?source=cnn&apiKey=c39a26d9c12f48dba2a5c00e35684ecc').then(response => response.json());\n  yield put({\n    type: \"NEWS_RECEIVED\",\n    json: json.articles\n  });\n}\n\nfunction* actionWatcher() {\n  yield takeLatest('GET_NEWS', fetchNews);\n} // for all the above sagas we need to create root saga\n\n\nexport default function* rootSaga() {\n  yield all([helloSaga(), watchAddOneActionHappeningInTheApp(), actionWatcher()]);\n}","map":{"version":3,"sources":["C:/Users/Dell 7010/OneDrive/Desktop/Reactjs collebra/ReactJS_app/demo/src/sagas/helloSaga.js"],"names":["put","takeEvery","takeLatest","all","helloSaga","console","log","delay","milliseconds","Promise","res","setTimeout","callAddOne","type","watchAddOneActionHappeningInTheApp","fetchNews","json","fetch","then","response","articles","actionWatcher","rootSaga"],"mappings":"AAAA,SAAQA,GAAR,EAAaC,SAAb,EAAwBC,UAAxB,EAAoCC,GAApC,QAA8C,oBAA9C,C,CACA;;AACA,OAAO,UAAUC,SAAV,GAAqB;AACxBC,EAAAA,OAAO,CAACC,GAAR,CAAY,iBAAZ;AACH;;AAGD,MAAMC,KAAK,GAAIC,YAAD,IAAkB,IAAIC,OAAJ,CAAaC,GAAG,IAAIC,UAAU,CAACD,GAAD,EAAMF,YAAN,CAA9B,CAAhC,C,CACA;AAEA;AACA;;;AAEA,OAAO,UAAUI,UAAV,GAAsB;AACzB,QAAML,KAAK,CAAC,IAAD,CAAX,CADyB,CACN;;AACnBF,EAAAA,OAAO,CAACC,GAAR,CAAY,+DAAZ;AACA,QAAMN,GAAG,CAAC;AAACa,IAAAA,IAAI,EAAC;AAAN,GAAD,CAAT,CAHyB,CAGI;AAChC;AAED,OAAO,UAAUC,kCAAV,GAA8C;AACjD,QAAMb,SAAS,CAAC,eAAD,EAAiBW,UAAjB,CAAf,CADiD,CACJ;AAChD,C,CAGD;;AACA,UAAUG,SAAV,GAAsB;AAClB,QAAMC,IAAI,GAAG,MAAMC,KAAK,CAAC,oFAAD,CAAL,CACZC,IADY,CACPC,QAAQ,IAAIA,QAAQ,CAACH,IAAT,EADL,CAAnB;AAEA,QAAMhB,GAAG,CAAC;AAAEa,IAAAA,IAAI,EAAE,eAAR;AAAyBG,IAAAA,IAAI,EAAEA,IAAI,CAACI;AAApC,GAAD,CAAT;AACD;;AACD,UAAUC,aAAV,GAA0B;AACrB,QAAMnB,UAAU,CAAC,UAAD,EAAaa,SAAb,CAAhB;AACJ,C,CAIH;;;AACA,eAAe,UAAUO,QAAV,GAAoB;AAC/B,QAAMnB,GAAG,CAAC,CAACC,SAAS,EAAV,EAAcU,kCAAkC,EAAhD,EAAmDO,aAAa,EAAhE,CAAD,CAAT;AACH","sourcesContent":["import {put, takeEvery, takeLatest, all} from \"redux-saga/effects\";\r\n// we need to code generator function for saga like this\r\nexport function* helloSaga(){\r\n    console.log(\"hello from saga\");\r\n}\r\n\r\n\r\nconst delay = (milliseconds) => new Promise( res => setTimeout(res, milliseconds) );\r\n//promises are functions that do their jon asynchronously. they display their results after some delay\r\n\r\n//another saga we ll use \r\n// lets write one that will call ADD_ONE action\r\n\r\nexport function* callAddOne(){\r\n    yield delay(1000); // delay by 1 sec\r\n    console.log(\"Inside callAddone ASYNC !! call action ADD_ONE asynchronously\");\r\n    yield put({type:\"ADD_ONE\"}); //dispatch this action asynchronously\r\n}\r\n\r\nexport function* watchAddOneActionHappeningInTheApp(){\r\n    yield takeEvery('ADD_ONE_ASYNC',callAddOne); //dispatch this action asynchronously\r\n}\r\n\r\n\r\n// watch NEWS saga\r\nfunction* fetchNews() {\r\n    const json = yield fetch('https://newsapi.org/v1/articles?source=cnn&apiKey=c39a26d9c12f48dba2a5c00e35684ecc')\r\n          .then(response => response.json(), );    \r\n    yield put({ type: \"NEWS_RECEIVED\", json: json.articles, });\r\n  }\r\n  function* actionWatcher() {\r\n       yield takeLatest('GET_NEWS', fetchNews)\r\n  }\r\n\r\n\r\n\r\n// for all the above sagas we need to create root saga\r\nexport default function* rootSaga(){\r\n    yield all([helloSaga(), watchAddOneActionHappeningInTheApp(),actionWatcher()])\r\n}"]},"metadata":{},"sourceType":"module"}