{"ast":null,"code":"import _regeneratorRuntime from\"C:\\\\Users\\\\Dell 7010\\\\OneDrive\\\\Desktop\\\\Reactjs collebra\\\\ReactJS_app\\\\demo\\\\node_modules\\\\@babel\\\\runtime\\\\regenerator\\\\index.js\";var _marked=/*#__PURE__*/_regeneratorRuntime.mark(helloSaga),_marked2=/*#__PURE__*/_regeneratorRuntime.mark(callAddOne),_marked3=/*#__PURE__*/_regeneratorRuntime.mark(watchAddOneActionHappeningInTheApp),_marked4=/*#__PURE__*/_regeneratorRuntime.mark(fetchNews),_marked5=/*#__PURE__*/_regeneratorRuntime.mark(actionWatcher),_marked6=/*#__PURE__*/_regeneratorRuntime.mark(fetchNewApp),_marked7=/*#__PURE__*/_regeneratorRuntime.mark(actionWatcher1),_marked8=/*#__PURE__*/_regeneratorRuntime.mark(rootSaga);import{put,takeEvery,takeLatest,all}from\"redux-saga/effects\";// we need to code generator function for saga like this\nexport function helloSaga(){return _regeneratorRuntime.wrap(function helloSaga$(_context){while(1){switch(_context.prev=_context.next){case 0:console.log(\"hello from saga\");case 1:case\"end\":return _context.stop();}}},_marked);}var delay=function delay(milliseconds){return new Promise(function(res){return setTimeout(res,milliseconds);});};//promises are functions that do their jon asynchronously. they display their results after some delay\n//another saga we ll use \n// lets write one that will call ADD_ONE action\nexport function callAddOne(){return _regeneratorRuntime.wrap(function callAddOne$(_context2){while(1){switch(_context2.prev=_context2.next){case 0:_context2.next=2;return delay(1000);case 2:// delay by 1 sec\nconsole.log(\"Inside callAddone ASYNC !! call action ADD_ONE asynchronously\");_context2.next=5;return put({type:\"ADD_ONE\"});case 5:case\"end\":return _context2.stop();}}},_marked2);}export function watchAddOneActionHappeningInTheApp(){return _regeneratorRuntime.wrap(function watchAddOneActionHappeningInTheApp$(_context3){while(1){switch(_context3.prev=_context3.next){case 0:_context3.next=2;return takeEvery('ADD_ONE_ASYNC',callAddOne);case 2:case\"end\":return _context3.stop();}}},_marked3);}// watch NEWS saga\nfunction fetchNews(){var json;return _regeneratorRuntime.wrap(function fetchNews$(_context4){while(1){switch(_context4.prev=_context4.next){case 0:_context4.next=2;return fetch('https://newsapi.org/v1/articles?source=cnn&apiKey=c39a26d9c12f48dba2a5c00e35684ecc').then(function(response){return response.json();});case 2:json=_context4.sent;_context4.next=5;return put({type:\"NEWS_RECEIVED\",json:json.articles});case 5:case\"end\":return _context4.stop();}}},_marked4);}function actionWatcher(){return _regeneratorRuntime.wrap(function actionWatcher$(_context5){while(1){switch(_context5.prev=_context5.next){case 0:_context5.next=2;return takeLatest('GET_NEWS',fetchNews);case 2:case\"end\":return _context5.stop();}}},_marked5);}// my node app saga \nfunction fetchNewApp(){var json;return _regeneratorRuntime.wrap(function fetchNewApp$(_context6){while(1){switch(_context6.prev=_context6.next){case 0:_context6.next=2;return fetch('http://localhost:8000/players').then(function(response){return response.json();});case 2:json=_context6.sent;_context6.next=5;return put({type:\"NODE_APP_DATA_RECIEVED\",json:json.data});case 5:case\"end\":return _context6.stop();}}},_marked6);}function actionWatcher1(){return _regeneratorRuntime.wrap(function actionWatcher1$(_context7){while(1){switch(_context7.prev=_context7.next){case 0:_context7.next=2;return takeLatest('GET_APP_DATA',fetchNewApp);case 2:case\"end\":return _context7.stop();}}},_marked7);}// for all the above sagas we need to create root saga\nexport default function rootSaga(){return _regeneratorRuntime.wrap(function rootSaga$(_context8){while(1){switch(_context8.prev=_context8.next){case 0:_context8.next=2;return all([helloSaga(),watchAddOneActionHappeningInTheApp(),actionWatcher(),actionWatcher1()]);case 2:case\"end\":return _context8.stop();}}},_marked8);}","map":{"version":3,"sources":["C:/Users/Dell 7010/OneDrive/Desktop/Reactjs collebra/ReactJS_app/demo/src/sagas/helloSaga.js"],"names":["helloSaga","callAddOne","watchAddOneActionHappeningInTheApp","fetchNews","actionWatcher","fetchNewApp","actionWatcher1","rootSaga","put","takeEvery","takeLatest","all","console","log","delay","milliseconds","Promise","res","setTimeout","type","fetch","then","response","json","articles","data"],"mappings":"sNAEiBA,S,iDAWAC,U,iDAMAC,kC,iDAMPC,S,iDAKAC,a,iDAKAC,W,iDAKAC,c,iDAMeC,Q,EA9CzB,OAASC,GAAT,CAAcC,SAAd,CAAyBC,UAAzB,CAAqCC,GAArC,KAAgD,oBAAhD,CACA;AACA,MAAO,SAAUX,CAAAA,SAAV,qHACHY,OAAO,CAACC,GAAR,CAAY,iBAAZ,EADG,sDAKP,GAAMC,CAAAA,KAAK,CAAG,QAARA,CAAAA,KAAQ,CAACC,YAAD,QAAkB,IAAIC,CAAAA,OAAJ,CAAY,SAAAC,GAAG,QAAIC,CAAAA,UAAU,CAACD,GAAD,CAAMF,YAAN,CAAd,EAAf,CAAlB,EAAd,CACA;AAEA;AACA;AAEA,MAAO,SAAUd,CAAAA,UAAV,0IACH,MAAMa,CAAAA,KAAK,CAAC,IAAD,CAAX,CADG,OACgB;AACnBF,OAAO,CAACC,GAAR,CAAY,+DAAZ,EAFG,iBAGH,MAAML,CAAAA,GAAG,CAAC,CAAEW,IAAI,CAAE,SAAR,CAAD,CAAT,CAHG,wDAMP,MAAO,SAAUjB,CAAAA,kCAAV,kKACH,MAAMO,CAAAA,SAAS,CAAC,eAAD,CAAkBR,UAAlB,CAAf,CADG,wDAKP;AACA,QAAUE,CAAAA,SAAV,kJACiB,MAAMiB,CAAAA,KAAK,CAAC,oFAAD,CAAL,CACdC,IADc,CACT,SAAAC,QAAQ,QAAIA,CAAAA,QAAQ,CAACC,IAAT,EAAJ,EADC,CAAN,CADjB,OACUA,IADV,iCAGI,MAAMf,CAAAA,GAAG,CAAC,CAAEW,IAAI,CAAE,eAAR,CAAyBI,IAAI,CAAEA,IAAI,CAACC,QAApC,CAAD,CAAT,CAHJ,wDAKA,QAAUpB,CAAAA,aAAV,6IACI,MAAMM,CAAAA,UAAU,CAAC,UAAD,CAAaP,SAAb,CAAhB,CADJ,wDAGA;AAEA,QAAUE,CAAAA,WAAV,oJACiB,MAAMe,CAAAA,KAAK,CAAC,+BAAD,CAAL,CAClBC,IADkB,CACb,SAAAC,QAAQ,QAAIA,CAAAA,QAAQ,CAACC,IAAT,EAAJ,EADK,CAAN,CADjB,OACUA,IADV,iCAGI,MAAMf,CAAAA,GAAG,CAAC,CAAEW,IAAI,CAAE,wBAAR,CAAkCI,IAAI,CAAEA,IAAI,CAACE,IAA7C,CAAD,CAAT,CAHJ,wDAKA,QAAUnB,CAAAA,cAAV,8IACI,MAAMI,CAAAA,UAAU,CAAC,cAAD,CAAiBL,WAAjB,CAAhB,CADJ,wDAKA;AACA,cAAe,SAAUE,CAAAA,QAAV,wIACX,MAAMI,CAAAA,GAAG,CAAC,CAACX,SAAS,EAAV,CAAcE,kCAAkC,EAAhD,CAAoDE,aAAa,EAAjE,CAAqEE,cAAc,EAAnF,CAAD,CAAT,CADW","sourcesContent":["import { put, takeEvery, takeLatest, all } from \"redux-saga/effects\";\r\n// we need to code generator function for saga like this\r\nexport function* helloSaga() {\r\n    console.log(\"hello from saga\");\r\n}\r\n\r\n\r\nconst delay = (milliseconds) => new Promise(res => setTimeout(res, milliseconds));\r\n//promises are functions that do their jon asynchronously. they display their results after some delay\r\n\r\n//another saga we ll use \r\n// lets write one that will call ADD_ONE action\r\n\r\nexport function* callAddOne() {\r\n    yield delay(1000); // delay by 1 sec\r\n    console.log(\"Inside callAddone ASYNC !! call action ADD_ONE asynchronously\");\r\n    yield put({ type: \"ADD_ONE\" }); //dispatch this action asynchronously\r\n}\r\n\r\nexport function* watchAddOneActionHappeningInTheApp() {\r\n    yield takeEvery('ADD_ONE_ASYNC', callAddOne); //dispatch this action asynchronously\r\n}\r\n\r\n\r\n// watch NEWS saga\r\nfunction* fetchNews() {\r\n    const json = yield fetch('https://newsapi.org/v1/articles?source=cnn&apiKey=c39a26d9c12f48dba2a5c00e35684ecc')\r\n        .then(response => response.json(),);\r\n    yield put({ type: \"NEWS_RECEIVED\", json: json.articles, });\r\n}\r\nfunction* actionWatcher() {\r\n    yield takeLatest('GET_NEWS', fetchNews)\r\n}\r\n// my node app saga \r\n\r\nfunction* fetchNewApp() {\r\n    const json = yield fetch('http://localhost:8000/players')\r\n    .then(response => response.json(),);\r\n    yield put({ type: \"NODE_APP_DATA_RECIEVED\", json: json.data, });\r\n}\r\nfunction* actionWatcher1() {\r\n    yield takeLatest('GET_APP_DATA', fetchNewApp)\r\n\r\n}\r\n\r\n// for all the above sagas we need to create root saga\r\nexport default function* rootSaga() {\r\n    yield all([helloSaga(), watchAddOneActionHappeningInTheApp(), actionWatcher(), actionWatcher1()])\r\n}"]},"metadata":{},"sourceType":"module"}